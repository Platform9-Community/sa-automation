set export

kubeconfig := env_var_or_default("KUBECONFIG", "path_to_a_kubeconfig")
kube_context := env_var_or_default("KUBE_CONTEXT", "default")

# Customize any of the below
chart_name := "node-svc-checker"
chart_repo := "./helm"
chart_version := "0.1.0"
namespace := "nsc-system"
# end customizations

version_safe := replace(chart_version,'.','-')
release := chart_name + "-" + version_safe

_helm_common := '--kubeconfig $kubeconfig --kube-context $kube_context'

_helm_args := '$release $chart_repo/$chart_name \
  --version $chart_version \
  --namespace $namespace \
  --create-namespace \
  --set namespace=$namespace \
  --values values-$version_safe.yaml \
'

_kubectl_common := "--context $kube_context --kubeconfig $kubeconfig"

_bash := "#!/usr/bin/env bash\nset -vuxo pipefail"

_sh := "just --no-highlight _exec_sh"

_k := "kubectl"

_default:
  @just --list --unsorted

_exec_sh *ARGS:
  @{{_bash}}
  {{ARGS}}

generate_values:
  @{{_sh}} "if [[ -f values-{{version_safe}}.yaml ]]; then cp values-{{version_safe}}.yaml values-{{version_safe}}.yaml.$(date '+%Y%m%d_%s'); fi"
  @{{_sh}} "helm show values {{chart_repo}}/{{chart_name}} --version \
    {{chart_version}} > values-{{version_safe}}.yaml"

template:
  @{{_sh}} "helm template {{_helm_args}} {{_helm_common}}"

install:
  @{{_sh}} "helm upgrade --install {{_helm_args}} {{_helm_common}}"

upgrade:
  @{{_sh}} "helm upgrade {{_helm_args}} {{_helm_common}}"

uninstall:
  @{{_sh}} "helm uninstall {{release}} --namespace {{namespace}} {{_helm_common}} || true"

list:
  @{{_sh}} "helm list --filter {{chart_name}} --all-namespaces --kubeconfig {{kubeconfig}} \
    --kube-context {{kube_context}}"
  @{{_sh}} "kubectl {{_kubectl_common}} get pods -o wide -l app.kubernetes.io/name=node-svc-checker -A"
